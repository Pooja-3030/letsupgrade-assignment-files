1.Write a program implementing insert, delete and display operation of Circular Queue
#include<stdio.h>
# define MAX 5
int cqueue_arr[MAX];
int front = -1;
int rear = -1;
void insert(int item)
{
if((front == 0 && rear == MAX-1) || (front == rear+1))
{
printf("Queue Overflow n");
return;
}
if(front == -1)
{
front = 0;
rear = 0;
}
else
{
if(rear == MAX-1)
rear = 0;
else
rear = rear+1;
}
cqueue_arr[rear] = item ;
}
void deletion()
{
if(front == -1)
{
printf("Queue Underflown");
return ;
}
printf("Element deleted from queue is : %dn",cqueue_arr[front]);
if(front == rear)
{
front = -1;
rear=-1;
}
else
{
if(front == MAX-1)
front = 0;
else
front = front+1;
}
}
void display()
{
int front_pos = front,rear_pos = rear;
if(front == -1)
{
printf("Queue is emptyn");
return;
}
printf("Queue elements :n");
if( front_pos <= rear_pos )
while(front_pos <= rear_pos)
{
printf("%d ",cqueue_arr[front_pos]);
front_pos++;
}
else
{
while(front_pos <= MAX-1)
{
printf("%d ",cqueue_arr[front_pos])
front_pos++;
}
front_pos = 0;
while(front_pos <= rear_pos)
{
printf("%d ",cqueue_arr[front_pos]);
front_pos++;
}
}
printf("n");
}
int main()
{
int choice,item;
do
{
printf("1.Insertn");
printf("2.Deleten");
printf("3.Displayn");
printf("4.Quitn");
printf("Enter your choice : ");
scanf("%d",&choice);
switch(choice)
{
case 1 :
printf("Input the element for insertion in queue : ");
scanf("%d", &item);
insert(item);
break;
case 2 :
deletion();
break;
case 3:
display();
break;
case 4:
break;
default:
printf("Wrong choicen");
}
}while(choice!=4);
return 0;
}
3.Implement push. pop and find the minimum element in a stack in O(1) time complexity
#include <bits/stdc++.h> 

using namespace std; 

struct MyStack 
{ 

    stack<int> s; 

    int minEle; 



    // Prints minimum element of MyStack 

    void getMin() 

    { 

        if (s.empty()) 

            cout << "Stack is empty\n"; 



        // variable minEle stores the minimum element 

        // in the stack. 

        else

            cout <<"Minimum Element in the stack is: "

                 << minEle << "\n"; 

    } 



    // Prints top element of MyStack 

    void peek() 

    { 

        if (s.empty()) 

        { 

            cout << "Stack is empty "; 

            return; 

        } 



        int t = s.top(); // Top element. 



        cout << "Top Most Element is: "; 



        // If t < minEle means minEle stores 

        // value of t. 

        (t < minEle)? cout << minEle: cout << t; 

    } 



    // Remove the top element from MyStack 

    void pop() 

    { 

        if (s.empty()) 

        { 

            cout << "Stack is empty\n"; 

            return; 

        } 



        cout << "Top Most Element Removed: "; 

        int t = s.top(); 

        s.pop(); 



        // Minimum will change as the minimum element 

        // of the stack is being removed. 

        if (t < minEle) 

        { 

            cout << minEle << "\n"; 

            minEle = 2*minEle - t; 

        } 



        else

            cout << t << "\n"; 

    } 



    // Removes top element from MyStack 

    void push(int x) 

    { 

        // Insert new number into the stack 

        if (s.empty()) 

        { 

            minEle = x; 

            s.push(x); 

            cout <<  "Number Inserted: " << x << "\n"; 

            return; 

        } 



        // If new number is less than minEle 

        if (x < minEle) 

        { 

            s.push(2*x - minEle); 

            minEle = x; 

        } 



        else

           s.push(x); 



        cout <<  "Number Inserted: " << x << "\n"; 

    } 
}; 


// Driver Code 

int main() 
{ 

    MyStack s; 

    s.push(3); 

    s.push(5); 

    s.getMin(); 

    s.push(2); 

    s.push(1); 

    s.getMin(); 

    s.pop(); 

    s.getMin(); 

    s.pop(); 

    s.peek(); 



    return 0; 
}
